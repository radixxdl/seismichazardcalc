
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Copyright 2009 OpenSHA.org in partnership with
    the Southern California Earthquake Center (SCEC, http://www.scec.org)
    at the University of Southern California and the UnitedStates Geological
    Survey (USGS; http://www.usgs.gov)
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
      http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<project basedir="." default="run.common.tests" name="Test">

	<property name="src" value="../src/" />
	<property name="test" value="../test/" />
	<property name="build" value="../classes/" />
	<property name="junit" value="../junit" />
	<property name="logs" value="${junit}/logs" />
	<property name="reports" value="${junit}/reports" />
	<property name="lib.dir" value="../lib" />
	<property name="ant.lib.dir" value="lib" />
	
	<!-- Properties and task definitions for Cobertura Code Coverage Tool -->
	<property name="cobertura.lib.dir" value="${ant.lib.dir}/cobertura-1.9.4.1" />
	<property name="cobertura.data.dir" value="../cobertura"/>
	<property name="cobertura.data.file" value="cobertura_current.ser"/>
	<property name="cobertura.data.weekly.file" value="cobertura_weekly.ser"/>
	<property name="cobertura.data.report.file" value="cobertura_for_report.ser"/>
	<property name="cobertura.report.dir" value="${cobertura.data.dir}/reports"/>
	<property name="cobertura.instrumented.dir" value="${cobertura.data.dir}/instrumented"/>
	
	<path id="cobertura.classpath">
	    <fileset dir="${cobertura.lib.dir}">
	        <include name="cobertura.jar" />
	        <include name="lib/**/*.jar" />
	    </fileset>
	</path>
	
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	
	<path id="library.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<target name="compile.tests" depends="">
		<ant antfile="build.xml" target="compile.tests"/>
	</target>
	
	<target name="resource.tests" depends="">
		<ant antfile="build.xml" target="resource.tests"/>
	</target>

	<target name="pre.test.cleanup">
		<delete dir="${logs}" failonerror="yes" verbose="no" />
		<delete dir="${reports}" failonerror="yes" verbose="no" />
	</target>

	<target name="pre.test.init" depends="pre.test.cleanup">
		<mkdir dir="${junit}" />
		<mkdir dir="${logs}" />
		<mkdir dir="${reports}" />
	</target>
	
	<target name="run.common.tests" depends="compile.tests, resource.tests, pre.test.init">
		<junit fork="yes" haltonfailure="true" 
			failureproperty="tests.failed"
			errorProperty="test.failed"
			haltonerror="true"
			dir="${build}"
			printsummary="yes">
			<jvmarg value="-Djava.awt.headless=true"/>
			<classpath>
				<pathelement location="${build}"/>
				<path refid="library.classpath" />
			</classpath>
			<formatter type="brief" usefile="false" />
      			<formatter type="xml" />

			<batchtest fork="yes" todir="${logs}">
				<fileset dir="../classes/">
					<include name="**/commons/**/*Suite*" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="run.operational.tests" depends="compile.tests, resource.tests, pre.test.init">
		<junit fork="yes" haltonfailure="true" 
			failureproperty="tests.failed"
			errorProperty="test.failed"
			haltonerror="true"
			dir="${build}"
			printsummary="yes">
			<jvmarg value="-Djava.awt.headless=true"/>
			<classpath>
				<pathelement location="${build}"/>
				<path refid="library.classpath" />
			</classpath>
			<formatter type="brief" usefile="false" />
	     			<formatter type="xml" />
				<batchtest fork="yes" todir="${logs}">
				<fileset dir="../classes/">
					<include name="org/opensha/commons/mapping/gmt/TestGMT_Operational*" />
					<include name="org/opensha/refFaultParamDb/tests/dao/db/Test*Operational*" />
				</fileset>
			</batchtest>
		</junit>    
	</target>
	
	<target name="run.pref.data.post.update.tests" depends="compile.tests, resource.tests, pre.test.init">
		<junit fork="yes" haltonfailure="true" 
			failureproperty="tests.failed"
			errorProperty="test.failed"
			haltonerror="true"
			dir="${build}"
			printsummary="yes">
			<jvmarg value="-Djava.awt.headless=true"/>
			<classpath>
				<pathelement location="${build}"/>
				<path refid="library.classpath" />
			</classpath>
			<formatter type="brief" usefile="false" />
	   			<formatter type="xml" />

			<batchtest fork="yes" todir="${logs}">
				<fileset dir="../classes/">
					<include name="org/opensha/refFaultParamDb/dao/db/PrefData*Test*" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!-- Targets for running Cobertura Code Coverage Tool -->
	<target name="cobertura.instrument">
		<delete file="${cobertura.data.dir}/${cobertura.data.file}" />
		<delete dir="${cobertura.instrumented.dir}" />
		
		<cobertura-instrument todir="${cobertura.instrumented.dir}"
			datafile="${cobertura.data.dir}/${cobertura.data.file}">
			<includeClasses regex=".*" />
			<excludeClasses regex="junk.*" />
			<excludeClasses regex="scratch.*" />
			<excludeClasses regex=".*\.Test.*" />
			<excludeClasses regex=".*Test" />
			<excludeClasses regex=".*Suite" />
			<fileset dir="${build}">
				<include name="**/*.class" />
		    </fileset>
		</cobertura-instrument>
		<!--<property name="build.old" value="${build}" />
		<property name="build" value="${cobertura.instrumented.dir}" />-->
		<ant antfile="build.xml" target="resource.all">
			<property name="build" value="${cobertura.instrumented.dir}"/>
		</ant>
		<!--<property name="build" value="${build.old}" />-->
	</target>
	
	<!-- This runs standard tests (the test suites) that can be executed quickly (every night) -->
	<target name="run.coverage.tests" depends="compile.tests, pre.test.init">
		<junit fork="yes" haltonfailure="true" 
			failureproperty="tests.failed"
			errorProperty="test.failed"
			haltonerror="true"
			dir="${build}"
			printsummary="yes">
			<jvmarg value="-Djava.awt.headless=true"/>
			
			<!--
				Specify the name of the coverage data file to use.
				The value specified below is the default.
			-->
			<sysproperty key="net.sourceforge.cobertura.datafile"
				file="${cobertura.data.dir}/${cobertura.data.file}" />
			
			<classpath>
				<!--
					Note the classpath order: instrumented classes are before the
					original (uninstrumented) classes.  This is important.
				-->
				<pathelement location="${cobertura.instrumented.dir}" />
				<pathelement location="${build}"/>
				<path refid="library.classpath" />
				<path refid="cobertura.classpath" />
			</classpath>
			<formatter type="brief" usefile="false" />
	     			<formatter type="xml" />
				<batchtest fork="yes" todir="${logs}">
				<fileset dir="../classes/">
					<include name="**/*Suite*" />
				</fileset>
			</batchtest>
		</junit>
		<copy file="${cobertura.data.dir}/${cobertura.data.file}"
				tofile="${cobertura.data.dir}/${cobertura.data.report.file}" />
	</target>
	
	<!-- This runs every single JUnit test...takes a while so should be done weekly -->
	<target name="run.coverage.weekly.tests" depends="compile.tests, pre.test.init">
		<delete file="${cobertura.data.dir}/${cobertura.data.weekly.file}" />
		<junit fork="yes" haltonfailure="false" 
			failureproperty="tests.failed"
			errorProperty="test.failed"
			haltonerror="false"
			dir="${build}"
			printsummary="yes">
			<jvmarg value="-Djava.awt.headless=true"/>
			
			<!--
				Specify the name of the coverage data file to use.
				The value specified below is the default.
			-->
			<sysproperty key="net.sourceforge.cobertura.datafile"
				file="${cobertura.data.dir}/${cobertura.data.file}" />
			
			<classpath>
				<!--
					Note the classpath order: instrumented classes are before the
					original (uninstrumented) classes.  This is important.
				-->
				<pathelement location="${cobertura.instrumented.dir}" />
				<pathelement location="${build}"/>
				<path refid="library.classpath" />
				<path refid="cobertura.classpath" />
			</classpath>
			<formatter type="brief" usefile="false" />
	     			<formatter type="xml" />
				<batchtest fork="yes" todir="${logs}">
				<fileset dir="${test}">
					<include name="**/*.java" />
					<exclude name="**/*Suite.java" />
					<exclude name="org/opensha/refFaultParamDb/tests/**/*.java" />
				</fileset>
			</batchtest>
		</junit>
		<copy file="${cobertura.data.dir}/${cobertura.data.file}"
			tofile="${cobertura.data.dir}/${cobertura.data.weekly.file}" />
	</target>
	
	<target name="cobertura.report">
		<delete dir="${cobertura.report.dir}" />
		
		<cobertura-report format="html" destdir="${cobertura.report.dir}"
				datafile="${cobertura.data.dir}/${cobertura.data.report.file}" >
			<fileset dir="${src}">
				<include name="**/*.java" />
				<exclude name="**/*Stub.java" />
			</fileset>
			<!--<fileset dir="${guisrc.dir}">
				<include name="**/*.java" />
				<exclude name="**/*RB.java" />
			</fileset>-->
		</cobertura-report>
	</target>
	
	<target name="run.cobertura" depends="compile.tests, resource.tests, pre.test.init, cobertura.instrument,
			run.coverage.tests, cobertura.report">
	</target>
	
	<target name="cobertura.check.merge">
		<available file="${cobertura.data.dir}/${cobertura.data.weekly.file}" property="weekly.present"/>
	</target>
	
	<target name="cobertura.merge" if="weekly.present">
		<cobertura-merge datafile="${cobertura.data.dir}/${cobertura.data.report.file}">
			<fileset dir="${cobertura.data.dir}">
				<include name="${cobertura.data.file}" />
				<include name="${cobertura.data.weekly.file}" />
			</fileset>
		</cobertura-merge>
	</target>
	
	<target name="run.merge.cobertura" depends="compile.tests, resource.tests, pre.test.init, cobertura.instrument,
			run.coverage.tests, cobertura.check.merge, cobertura.merge, cobertura.report">
	</target>
	
	<target name="run.cobertura.weekly" depends="compile.tests, resource.tests, pre.test.init, cobertura.instrument,
			run.coverage.weekly.tests, cobertura.check.merge, cobertura.merge, cobertura.report">
	</target>
	
	<target name="run.app.launch.tests" depends="compile.tests, resource.tests, pre.test.init">
		<echo message="luanching Xvfb"/>
		<exec executable="/usr/bin/Xvfb" spawn="true">
			<arg line=":2 -screen 0 1600x1200x24"/>
		</exec>
		<echo message="done launching Xvfb, running tests"/>
		<junit fork="yes" haltonfailure="true" 
			failureproperty="tests.failed"
			errorProperty="test.failed"
			haltonerror="true"
			dir="../"
			printsummary="yes">
			<classpath>
				<pathelement location="${build}"/>
				<path refid="library.classpath" />
			</classpath>
			<formatter type="brief" usefile="false" />
      			<formatter type="xml" />
			<env key="DISPLAY" value=":2.0"/>

			<batchtest fork="yes" todir="${logs}">
				<fileset dir="../classes/">
					<include name="org/opensha/sha/gui/Test*Launch*" />
				</fileset>
			</batchtest>
		</junit>
		<echo message="killing Xvfb"/>
		<exec executable="/usr/bin/killall">
			<arg line="Xvfb"/>
		</exec>
		<echo message="done killing Xvfb"/>
	</target>
	
</project>
